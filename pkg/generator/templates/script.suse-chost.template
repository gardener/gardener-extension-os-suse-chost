{{- if and (eq .Type "memoryone-chost") .Bootstrap -}}
Content-Type: multipart/mixed; boundary="==BOUNDARY=="
MIME-Version: 1.0
--==BOUNDARY==
Content-Type: text/x-vsmp; section=vsmp
system_memory={{ .AdditionalValues.SystemMemory }}
mem_topology={{ .AdditionalValues.MemoryTopology }}
--==BOUNDARY==
Content-Type: text/x-shellscript
#!/bin/bash
{{- else -}}
#!/bin/bash
{{- end -}}
{{- define "put-content" -}}
cat << EOF | base64 -d > '{{ .Path }}'
{{ .Content }}
EOF
{{- end }}
{{- define "put-content-unencoded" -}}
cat << EOF > '{{ .Path }}'
{{ .Content }}
EOF
{{- end }}

{{ if .Bootstrap -}}
# disable the default log rotation
mkdir -p /etc/docker/
cat <<EOF > /etc/docker/daemon.json
{
  "log-level": "warn",
  "log-driver": "json-file"
}
EOF
{{ end -}}

{{ range $_, $file := .Files -}}
mkdir -p '{{ $file.Dirname }}'
{{ if $file.TransmitUnencoded -}}
{{ template "put-content-unencoded" $file }}
{{- else -}}
{{ template "put-content" $file }}
{{- end }}
{{- if $file.Permissions }}
chmod '{{ $file.Permissions }}' '{{ $file.Path }}'
{{ end }}
{{ end }}
{{- range $_, $unit := .Units -}}
{{ if $unit.Content -}}
{{ template "put-content" $unit }}
{{- end }}
{{ if $unit.DropIns }}
mkdir -p '{{ $unit.DropIns.Path }}'
{{ range $_, $dropIn := $unit.DropIns.Items -}}
{{ template "put-content" $dropIn }}
{{- end -}}
{{- end -}}
{{- end }}

if [[ -d /sys/class/net/eth0 ]]
then
  ip link set dev eth0 mtu 1460
  grep -q '^MTU' /etc/sysconfig/network/ifcfg-eth0 && sed -i 's/^MTU.*/MTU=1460/' /etc/sysconfig/network/ifcfg-eth0 || echo 'MTU=1460' >> /etc/sysconfig/network/ifcfg-eth0
  wicked ifreload eth0
fi
{{ if .Bootstrap -}}
until zypper -q install -y docker wget socat jq nfs-client; [ $? -ne 7 ]; do sleep 1; done
ln -s /usr/bin/docker /bin/docker
ln -s /bin/ip /usr/bin/ip
if [ ! -s /etc/hostname ]; then hostname > /etc/hostname; fi
systemctl daemon-reload
systemctl enable docker && systemctl restart docker
{{ end -}}
systemctl daemon-reload
{{ range $_, $unit := .Units -}}
{{- if or (ne $unit.Name "cloud-config-downloader.service") ($.Bootstrap) }}
systemctl enable '{{ $unit.Name }}' && systemctl restart '{{ $unit.Name }}'
{{ end -}}
{{ end -}}
{{- if and (eq .Type "memoryone-chost") .Bootstrap }}
--==BOUNDARY==
{{- end }}
